X = dataset.iloc[:, :-1]
y = dataset.iloc[:, 30]
y = dataset['Class']  # Replace 'Class' with the actual column name.
y_pred = classifier.predict(X_train.values)
y_pred = classifier.predict(X_train)
classifier.fit(X_test, y_test)
y_pred1 = classifier.predict(X_test)
y_pred1 = classifier.predict(variety.values)
variety_scaled = sc.transform(variety)
y_pred1 = classifier.predict(variety_scaled)
sns.heatmap(cm, fmt="d", xticklabels=['No Fraud', 'Fraud'], yticklabels=['No Fraud', 'Fraud'], annot=True, cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()
import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt

# Importing the dataset
dataset = pd.read_csv('creditcard.csv')
X = dataset.iloc[:, :-1]  # All features
y = dataset.iloc[:, -1]  # Assuming the last column is the target

# Splitting the dataset into Training and Test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1/3, random_state=2)

# Feature Scaling
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Fitting K-NN to the Training set
classifier = KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2)
classifier.fit(X_train, y_train)

# Predicting the Training set results
y_pred = classifier.predict(X_train)

# Confusion Matrix for Training Set
cm = confusion_matrix(y_train, y_pred)

# Heatmap
sns.heatmap(cm, fmt="d", xticklabels=['No Fraud', 'Fraud'], yticklabels=['No Fraud', 'Fraud'], annot=True, cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Training Set Confusion Matrix")
plt.show()

# Calculating Performance Metrics for Training Set
FP = cm.sum(axis=0) - np.diag(cm) 
FN = cm.sum(axis=1) - np.diag(cm)
TP = np.diag(cm)
TN = cm.sum() - (FP + FN + TP)

# Ensure division handles zero correctly
TPR = np.nan_to_num(TP / (TP + FN))  # Sensitivity or Recall
TNR = np.nan_to_num(TN / (TN + FP))  # Specificity
PPV = np.nan_to_num(TP / (TP + FP))  # Precision
NPV = np.nan_to_num(TN / (TN + FN))  # Negative Predictive Value
FPR = np.nan_to_num(FP / (FP + TN))  # False Positive Rate
FNR = np.nan_to_num(FN / (TP + FN))  # False Negative Rate
FDR = np.nan_to_num(FP / (TP + FP))  # False Discovery Rate
ACC = (TP + TN) / (TP + FP + FN + TN)  # Overall Accuracy

print("Recall:", TPR)
print("Specificity:", TNR)
print("Precision:", PPV)
print("Negative Predictive Value:", NPV)
print("False Positive Rate:", FPR)
print("False Negative Rate:", FNR)
print("False Discovery Rate:", FDR)
print("Accuracy:", ACC)

# Testing set prediction
y_pred_test = classifier.predict(X_test)

# Confusion Matrix for Testing Set
cm_test = confusion_matrix(y_test, y_pred_test)
sns.heatmap(cm_test, fmt="d", xticklabels=['No Fraud', 'Fraud'], yticklabels=['No Fraud', 'Fraud'], annot=True, cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Testing Set Confusion Matrix")
plt.show()

# Predicting for new input
variety = pd.DataFrame({
    'Time': [0],
    'V1': [-1.3598071336738],
    'V2': [-0.0727811733098497],
    'V3': [2.53634673796914],
    'V4': [1.37815522427443],
    'V5': [-0.338320769942518],
    'V6': [0.462387777762292],
    'V7': [0.239598554061257],
    'V8': [0.0986979012610507],
    'V9': [0.363786969611213],
    'V10': [0.0907941719789316],
    'V11': [-0.551599533260813],
    'V12': [-0.617800855762348],
    'V13': [-0.991389847235408],
    'V14': [-0.311169353699879],
    'V15': [1.46817697209427],
    'V16': [-0.470400525259478],
    'V17': [0.207971241929242],
    'V18': [0.0257905801985591],
    'V19': [0.403992960255733],
    'V20': [0.251412098239705],
    'V21': [-0.018306777944153],
    'V22': [0.277837575558899],
    'V23': [-0.110473910188767],
    'V24': [0.0669280749146731],
    'V25': [0.128539358273528],
    'V26': [-0.189114843888824],
    'V27': [0.133558376740387],
    'V28': [-0.0210530534538215],
    'Amount': [149.62]
})

# Scale new input
variety_scaled = sc.transform(variety)

# Predict new input
fraud_prediction = classifier.predict(variety_scaled)
print("Is the transaction fraudulent?", fraud_prediction[0])

